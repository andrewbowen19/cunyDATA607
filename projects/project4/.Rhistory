library(jsonlite)
endpoint_url <- "https://api.openaq.org/v2/measurements?date_from=2000-01-01T00%3A00%3A00%2B00%3A00&date_to=2022-09-29T15%3A10%3A00%2B00%3A00&limit=100&page=1&offset=0&sort=desc&radius=1000&order_by=datetime"
response <- GET(endpoint_url)
df <- as.data.frame(fromJSON(response$content))
rawToChar(response$content)
library(httr)
library(jsonlite)
endpoint_url <- "https://api.openaq.org/v2/measurements?date_from=2000-01-01T00%3A00%3A00%2B00%3A00&date_to=2022-09-29T15%3A10%3A00%2B00%3A00&limit=100&page=1&offset=0&sort=desc&radius=1000&order_by=datetime"
response <- GET(endpoint_url)
df <- as.data.frame(fromJSON(rawToChar(response$content)))
head(df)
?t.test
?specify
?t.test
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
link = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv'
bball_csv <- read_csv(link,show_col_types=FALSE)
bball_csv |>
dplyr::group_by (season) |>
dplyr::summarize(cnt=n()) |>
dplyr::arrange(desc(season))
last_three_seasons <- bball_csv |>
dplyr::filter(season %in% c(2020,2021,2022))
#alternatively
last_three_seasons_v2 <- bball_csv |>
dplyr::filter(season>=2020 & season<2023)
dim(last_three_seasons) == dim(last_three_seasons_v2)
last_three_seasons |> select(date,season,team1,team2,elo1_pre,elo2_pre,elo1_post,elo2_post,score1,score2)
sum_stats <- last_three_seasons |>
group_by(team1,season) |>
summarize(min_elo = min(elo1_pre),
max_elo = max(elo1_post),
season_diff = max_elo - min_elo) |>
arrange(-season_diff)
sum_stats %>%
ggplot(mapping=aes(min_elo,max_elo)) +
geom_point(aes(shape=as.character(season),size=season_diff)) +
geom_text(aes(label=team1),vjust=-1.5, size=2) +
labs(title='Elo Ratings over 3 prior NBA Seasons',caption='538 Data Set',size='Season Elo Difference',shape='Season')
View(sum_stats)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
link = 'https://projects.fivethirtyeight.com/nba-model/nba_elo.csv'
bball_csv <- read_csv(link,show_col_types=FALSE)
bball_csv |>
dplyr::group_by (season) |>
dplyr::summarize(cnt=n()) |>
dplyr::arrange(desc(season))
last_three_seasons <- bball_csv |>
dplyr::filter(season %in% c(2020,2021,2022))
#alternatively
last_three_seasons_v2 <- bball_csv |>
dplyr::filter(season>=2020 & season<2023)
dim(last_three_seasons) == dim(last_three_seasons_v2)
last_three_seasons |> select(date,season,team1,team2,elo1_pre,elo2_pre,elo1_post,elo2_post,score1,score2)
sum_stats <- last_three_seasons |>
group_by(team1,season) |>
summarize(min_elo = min(elo1_pre),
max_elo = max(elo1_post),
season_diff = max_elo - min_elo) |>
arrange(-season_diff)
sum_stats %>%
ggplot(mapping=aes(min_elo,max_elo)) +
geom_point(aes(shape=as.character(season),size=season_diff)) +
geom_text(aes(label=team1),vjust=-1.5, size=2) +
labs(title='Elo Ratings over 3 prior NBA Seasons',caption='538 Data Set',size='Season Elo Difference',shape='Season')
# ggplot()
View(last_three_seasons_v2)
ggplot(sum_stats, aes(x=season_diff)) + geom_histogram()
ggplot(sum_stats, aes(x=season_diff)) + geom_histogram(binwidth=25)
ggplot(sum_stats, aes(x=season_diff)) + geom_histogram(binwidth=20)
View(last_three_seasons_v2)
View(last_three_seasons)
View(last_three_seasons_v2)
last_three_seasons_v2 %>%
filter(team1 == "CHI" | team2 == "CHI")
ggplot(aes(x = date, y = elo1_post))
last_three_seasons_v2 %>%
filter(team1 == "CHI" | team2 == "CHI") %>%
ggplot(aes(x = date, y = elo1_post))
last_three_seasons_v2 %>%
filter(team1 == "CHI" | team2 == "CHI") %>%
ggplot(aes(x = date, y = elo1_post)) + geom_line()
View(sum_stats)
# isolating the ELO scores for the Bulls, as they are often listed as either team 1 or team 2
bulls_games <- last_three_seasons_v2 %>%
filter(team1 == "CHI" | team2 == "CHI") %>%
mutate(bulls_post_elo = ifelse(team1 == "CHI", elo1_post, elo2_post))
bulls_games %>%
ggplot(aes(x = date, y = elo1_post)) + geom_line()
View(bulls_games)
View(last_three_seasons)
View(last_three_seasons_v2)
typeof(last_three_seasons_v2$date[[1]])
summarise(df)
summary(df)
describe(df)
glimpse(last_three_seasons_v2)
library(lubridate)
bulls_by_week <- bulls_games %>%
groupby(month =  lubridate::floor_date(date, 'month')) %>%
summarise(avg_post_elo = mean(bulls_post_elo))
library(lubridate)
bulls_by_week <- bulls_games %>%
group_by(month =  lubridate::floor_date(date, 'month')) %>%
summarise(avg_post_elo = mean(bulls_post_elo))
View(bulls_by_week)
library(lubridate)
bulls_by_week <- bulls_games %>%
group_by(month =  lubridate::floor_date(date, 'week')) %>%
summarise(avg_post_elo = mean(bulls_post_elo))
View(bulls_by_week)
library(lubridate)
bulls_by_week <- bulls_games %>%
group_by(week =  lubridate::floor_date(date, 'week')) %>%
summarise(avg_post_elo = mean(bulls_post_elo))
# Now let's plot our grouped data
bulls_by_week %>%
ggplot(aes(x = week, y = avg_post_elo)) + geom_line()
View(bulls_games)
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" && score1 > score2), "W", ))
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" && score1 > score2), "W", "L"))
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L"))
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre))
ggplot(aes(x = bulls_pre, y = bulls_post, color=result)) + geom_point()
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre)) %>%
ggplot(aes(x = bulls_pre, y = bulls_post, color=result)) + geom_point()
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre)) %>%
ggplot(aes(x = bulls_pre, y = bulls_post_elo, color=result)) + geom_point()
# First we need to add a "results" column via ifelse that shows whether the Bulls won or not
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre)) %>%
ggplot(aes(x = bulls_pre, y = bulls_post_elo, color=result)) + geom_point() +
geom_title("Postgame ELO ratings vs pre-game: Chicago Bulls") + xlab("Pre-game ELO rating") + ylab("Post-game ELO rating")
# First we need to add a "results" column via ifelse that shows whether the Bulls won or not
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre)) %>%
ggplot(aes(x = bulls_pre, y = bulls_post_elo, color=result)) + geom_point() +
title("Postgame ELO ratings vs pre-game: Chicago Bulls") + xlab("Pre-game ELO rating") + ylab("Post-game ELO rating")
# First we need to add a "results" column via ifelse that shows whether the Bulls won or not
bulls_games %>%
mutate(result = ifelse( (team1== "CHI" & score1 > score2) | (team2=="CHI" & score2 > score1), "W", "L")) %>%
mutate(bulls_pre = ifelse(team1 == "CHI", elo1_pre, elo2_pre)) %>%
ggplot(aes(x = bulls_pre, y = bulls_post_elo, color=result)) + geom_point() +
ggtitle("Postgame ELO ratings vs pre-game: Chicago Bulls") + xlab("Pre-game ELO rating") + ylab("Post-game ELO rating")
View(sum_stats)
View(last_three_seasons_v2)
View(bball_csv)
View(last_three_seasons_v2)
team_elo <- last_three_seasons_v2 %>%
group_by(team1) %>%
summarise(mean_team1 = mean(elo1_post))
View(team_elo)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(team1, team2)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(team1, team2)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2), names_to=("team_type", "team"))
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2), names_to=c("team_type", "team"))
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2, elo1_post, elo2_post))
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
summarise(mean_post_elo)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
# team_elo %>%
#   group_by(value) %>%
#   summarise(mean_post_elo)
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name = "team1", elo1_post, elo2_post))
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name == "team1", elo1_post, elo2_post))
summarise(mean_post_elo = mean(team_elo)) %>%
ggplot(aes(x = team, y=mean_post_elo)) + geom_bar(stat='identity')
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name == "team1", elo1_post, elo2_post)) %>%
summarise(mean_post_elo = mean(team_elo)) %>%
ggplot(aes(x = team, y=mean_post_elo)) + geom_bar(stat='identity')
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name == "team1", elo1_post, elo2_post)) %>%
summarise(mean_post_elo = mean(team_elo)) %>%
ggplot(aes(x = value, y=mean_post_elo)) + geom_bar(stat='identity')
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
head(team_elo)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name == "team1", elo1_post, elo2_post)) %>%
summarise(mean_post_elo = mean(team_elo)) %>%
ggplot(aes(x = value, y=mean_post_elo)) + geom_bar(stat='identity') +
theme(axis.text.x = element_text(angle=90, hjust=1))
team_elo <- last_three_seasons_v2 %>%
pivot_longer(cols=c(team1, team2))
# Grouping by team (need to distinguish between team 1 and team 2)
team_elo %>%
group_by(value) %>%
mutate(team_elo = ifelse(name == "team1", elo1_post, elo2_post)) %>%
summarise(mean_post_elo = mean(team_elo)) %>%
ggplot(aes(x = value, y=mean_post_elo)) + geom_bar(stat = 'identity') +
theme(axis.text.x = element_text(angle=90, hjust=1))
install.packages("tensorflow")
library(stringr)
ham_url <- "https://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2"
dataset <- get_file(
"20021010_easy_ham",
ham_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
library(stringr)
library(tensorflow)
ham_url <- "https://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2"
dataset <- get_file(
"20021010_easy_ham",
ham_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
library(stringr)
library(tensorflow)
library(tfdatasets)
install.packages("tfdatasets")
library(stringr)
library(tensorflow)
library(tfdatasets)
ham_url <- "https://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2"
dataset <- get_file(
"20021010_easy_ham",
ham_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
url <- "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
dataset <- get_file(
"aclImdb_v1",
url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
url <- "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
dataset <- get_file(
"aclImdb_v1",
url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
install.packages("keras")
library(stringr)
library(tensorflow)
library(tfdatasets)
library(keras)
url <- "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
dataset <- get_file(
"aclImdb_v1",
url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
install.packages("tensorflow")
library(stringr)
library(tensorflow)
library(tfdatasets)
library(keras)
url <- "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
dataset <- get_file(
"aclImdb_v1",
url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
install_tensorflow()
library(stringr)
library(tensorflow)
library(tfdatasets)
library(keras)
# install_tensorflow()
url <- "https://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz"
dataset <- get_file(
"aclImdb_v1",
url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
ham_url <- "https://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2"
ham_dataset <- get_file(
"20021010_easy_ham",
ham_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
ham_dataset
# Loading ham dataset
ham_url <- "https://spamassassin.apache.org/old/publiccorpus/20021010_easy_ham.tar.bz2"
ham_dataset <- get_file(
"20021010_easy_ham",
ham_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
# Loading spam dataset
spam_url <- "https://spamassassin.apache.org/old/publiccorpus/20030228_spam_2.tar.bz2"
spam_dataset <- get_file(
"20030228_spam_2",
spam_url,
untar = TRUE,
cache_dir = '.',
cache_subdir = ''
)
ham_dir <- file.path("easy_ham")
spam_dir <- file.path("spam_2")
read.file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
library(readr)
read.file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
library(readr)
reader::read.file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
library(readr)
readr::read.file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
library(readr)
readr::read_file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
# library(readr)
# readr::read_file("spam_2/01053.2ec9e69df620c85e3c7c6f61ce199a3c")
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham/train',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
for (f in list.dirs("easy_ham/")){
print(f)
}
for (f in list.files("easy_ham/")){
print(f)
}
library(stringr)
library(tensorflow)
library(tfdatasets)
library(keras)
library(glue)
# install_tensorflow()
# Renaming unzipped files in our spam and ham dirs so they have a ,txt extension
for (f in list.files("easy_ham/")) {
new_name <- glue("easy_ham/{f}.txt")
file.rename(glue("easy_ham{f}"), new_name)
}
# Renaming unzipped files in our spam and ham dirs so they have a ,txt extension
dirs <- c("spam_2", "easy_ham")
for (d in dirs) {
dir_path <- glue("{d}/")
for (f in list.files(dir_path)) {
new_name <- glue("{dir_path}{f}.txt")
file.rename(glue("{dir_path}{f}"), new_name)
}
}
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham/',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
list.dirs("easy_ham")
getwd()
setwd("CUNY/cunyDATA607/projects")
setwd("project4")
list.dirs()
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'easy_ham',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'data/easy_ham',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'data/',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
spam_raw_train_ds <- text_dataset_from_directory(
'data',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'data/',
batch_size = 32,
validation_split = 0.1,
subset = 'easy_ham',
seed = seed
)
seed <- 1234
ham_raw_train_ds <- text_dataset_from_directory(
'data/',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
spam_raw_train_ds <- text_dataset_from_directory(
'data',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
seed <- 1234
raw_train_ds <- text_dataset_from_directory(
'data/',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
spam_raw_train_ds <- text_dataset_from_directory(
'data',
batch_size = 32,
validation_split = 0.1,
subset = 'training',
seed = seed
)
