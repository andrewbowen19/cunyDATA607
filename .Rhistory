conn = dbConnect(MySQL(), user='root', password='dataiscool', dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
Sys.getenv()
Sys.getenv(google_db_password)
Sys.getenv()
pwd <- SYs.getenv('google_db_password')
pwd <- Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password='dataiscool', dbname='movies', host='34.133.39.230')
conn
pwd <- Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
pwd <- Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
library('RMySQL')
library('dplyr')
pwd <- 'dataiscool'#Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
# Chunk 1: global-options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: load-data
data(nycflights)
# Chunk 4: names
names(nycflights)
# Chunk 6: glimpse
glimpse(nycflights)
# Chunk 7: hist-dep-delay
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 8: hist-dep-delay-bins
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# Chunk 9: lax-flights-hist
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 10: lax-flights-summ
lax_flights %>%
summarise(mean_dd   = mean(dep_delay),
median_dd = median(dep_delay),
n         = n())
# Chunk 11: sfo-feb-flights
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# Chunk 12
# Using the comma to serve as an "AND" operator on our filtering.
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# Chunk 13
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
sfo_feb_flights %>%
summarise(median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n())
sfo_feb_flights
# Chunk 14: summary-custom-list-origin
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
# Chunk 15
# Using arr_delay field instead of dep_delay
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
# Chunk 16: mean-dep-delay-months
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# Chunk 17
nycflights %>%
group_by(month) %>%
summarise(mean_dep_delay_by_month = mean(dep_delay), median_dep_delay_by_month = median(dep_delay)) %>%
arrange(desc(mean_dep_delay_by_month))
# Chunk 18: dep-type
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
# Chunk 19: ot-dep-rate
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# Chunk 20: viz-origin-dep-type
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
# Chunk 21
# Could also calculate the delay rate as 1 - on-time rate, since these are mutually exclusive
nycflights %>%
group_by(origin) %>%
summarise(delayed_dep_rate = sum(dep_type == "delayed") / n()) %>%
arrange(desc(delayed_dep_rate))
# Chunk 22
df <- nycflights %>%
mutate(avg_speed = distance / (air_time / 60)) # converting travel time to hours
df$avg_speed
# Chunk 23
ggplot(df, aes(x=distance, y=avg_speed)) + geom_point()
# Chunk 24
# Filtering our flights df to just the airlines we want
desired_airlines <- nycflights %>%
filter(carrier == "AA" | carrier == "DL" | carrier == "UA")
ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
# Chunk 25
sp <- ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
sp + geom_vline(xintercept = 60, linetype="dotted")
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
sfo_feb_flights %>%
summarise(median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n())
sfo_feb_flights
# Chunk 1: global-options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: load-data
data(nycflights)
# Chunk 4: names
names(nycflights)
# Chunk 6: glimpse
glimpse(nycflights)
# Chunk 7: hist-dep-delay
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 8: hist-dep-delay-bins
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# Chunk 9: lax-flights-hist
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 10: lax-flights-summ
lax_flights %>%
summarise(mean_dd   = mean(dep_delay),
median_dd = median(dep_delay),
n         = n())
# Chunk 11: sfo-feb-flights
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# Chunk 12
# Using the comma to serve as an "AND" operator on our filtering.
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights
# Chunk 13
# Arrival delays into SFO
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
sfo_feb_flights %>%
summarise(median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n())
sfo_feb_flights
# Chunk 14: summary-custom-list-origin
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
# Chunk 15
# Using arr_delay field instead of dep_delay
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
# Chunk 16: mean-dep-delay-months
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# Chunk 17
nycflights %>%
group_by(month) %>%
summarise(mean_dep_delay_by_month = mean(dep_delay), median_dep_delay_by_month = median(dep_delay)) %>%
arrange(desc(mean_dep_delay_by_month))
# Chunk 18: dep-type
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
# Chunk 19: ot-dep-rate
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# Chunk 20: viz-origin-dep-type
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
# Chunk 21
# Could also calculate the delay rate as 1 - on-time rate, since these are mutually exclusive
nycflights %>%
group_by(origin) %>%
summarise(delayed_dep_rate = sum(dep_type == "delayed") / n()) %>%
arrange(desc(delayed_dep_rate))
# Chunk 22
df <- nycflights %>%
mutate(avg_speed = distance / (air_time / 60)) # converting travel time to hours
df$avg_speed
# Chunk 23
ggplot(df, aes(x=distance, y=avg_speed)) + geom_point()
# Chunk 24
# Filtering our flights df to just the airlines we want
desired_airlines <- nycflights %>%
filter(carrier == "AA" | carrier == "DL" | carrier == "UA")
ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
# Chunk 25
sp <- ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
sp + geom_vline(xintercept = 60, linetype="dotted")
# Chunk 1: global-options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: load-data
data(nycflights)
# Chunk 4: names
names(nycflights)
# Chunk 6: glimpse
glimpse(nycflights)
# Chunk 7: hist-dep-delay
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 8: hist-dep-delay-bins
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# Chunk 9: lax-flights-hist
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 10: lax-flights-summ
lax_flights %>%
summarise(mean_dd   = mean(dep_delay),
median_dd = median(dep_delay),
n         = n())
# Chunk 11: sfo-feb-flights
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# Chunk 12
# Using the comma to serve as an "AND" operator on our filtering.
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights
# Chunk 13
# Arrival delays into SFO
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
sfo_feb_flights %>%
summarise(median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n())
sfo_feb_flights
# Chunk 14: summary-custom-list-origin
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
# Chunk 15
# Using arr_delay field instead of dep_delay
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
# Chunk 16: mean-dep-delay-months
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# Chunk 17
nycflights %>%
group_by(month) %>%
summarise(mean_dep_delay_by_month = mean(dep_delay), median_dep_delay_by_month = median(dep_delay)) %>%
arrange(desc(mean_dep_delay_by_month))
# Chunk 18: dep-type
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
# Chunk 19: ot-dep-rate
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# Chunk 20: viz-origin-dep-type
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
# Chunk 21
# Could also calculate the delay rate as 1 - on-time rate, since these are mutually exclusive
nycflights %>%
group_by(origin) %>%
summarise(delayed_dep_rate = sum(dep_type == "delayed") / n()) %>%
arrange(desc(delayed_dep_rate))
# Chunk 22
df <- nycflights %>%
mutate(avg_speed = distance / (air_time / 60)) # converting travel time to hours
head(df$avg_speed, 10)
# Chunk 23
ggplot(df, aes(x=distance, y=avg_speed)) + geom_point()
# Chunk 24
# Filtering our flights df to just the airlines we want
desired_airlines <- nycflights %>%
filter(carrier == "AA" | carrier == "DL" | carrier == "UA")
ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
# Chunk 25
sp <- ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
sp + geom_vline(xintercept = 60, linetype="dotted")
library('RMySQL')
library('dplyr')
pwd <- 'dataiscool'#Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
pwd <- Sys.getenv()
print(pwd)
pwd <- Sys.getenv("google_db_password")
print(pwd)
pwd <- Sys.getenv("google_db_password")
print(pwd)
pwd <- Sys.getenv("google_db_password")
print(pwd)
library('RMySQL')
library('dplyr')
pwd <- Sys.getenv("google_db_password")
print(pwd)
pwd <- 'dataiscool'#Sys.getenv('google_db_password')
print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
pwd <- Sys.getenv("google_db_password")
```{r}
pwd <- Sys.getenv("google_db_password")
#pwd <- 'dataiscool'#Sys.getenv('google_db_password')
#print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
library('RMySQL')
library('dplyr')
pwd <- Sys.getenv("google_db_password")
#pwd <- 'dataiscool'#Sys.getenv('google_db_password')
#print(pwd)
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
# Chunk 1: global-options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
library(openintro)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
# Chunk 3: load-data
data(nycflights)
# Chunk 4: names
names(nycflights)
# Chunk 6: glimpse
glimpse(nycflights)
# Chunk 7: hist-dep-delay
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 8: hist-dep-delay-bins
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
# Chunk 9: lax-flights-hist
lax_flights <- nycflights %>%
filter(dest == "LAX")
ggplot(data = lax_flights, aes(x = dep_delay)) +
geom_histogram()
# Chunk 10: lax-flights-summ
lax_flights %>%
summarise(mean_dd   = mean(dep_delay),
median_dd = median(dep_delay),
n         = n())
# Chunk 11: sfo-feb-flights
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
# Chunk 12
# Using the comma to serve as an "AND" operator on our filtering.
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights
# Chunk 13
# Arrival delays into SFO
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
sfo_feb_flights %>%
summarise(median_ad = median(arr_delay),
iqr_ad = IQR(arr_delay),
n_flights = n())
sfo_feb_flights
# Chunk 14: summary-custom-list-origin
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_dd = median(dep_delay), iqr_dd = IQR(dep_delay), n_flights = n())
# Chunk 15
# Using arr_delay field instead of dep_delay
sfo_feb_flights %>%
group_by(origin) %>%
summarise(median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n_flights = n())
# Chunk 16: mean-dep-delay-months
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
# Chunk 17
nycflights %>%
group_by(month) %>%
summarise(mean_dep_delay_by_month = mean(dep_delay), median_dep_delay_by_month = median(dep_delay)) %>%
arrange(desc(mean_dep_delay_by_month))
# Chunk 18: dep-type
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
# Chunk 19: ot-dep-rate
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
# Chunk 20: viz-origin-dep-type
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
# Chunk 21
# Could also calculate the delay rate as 1 - on-time rate, since these are mutually exclusive
nycflights %>%
group_by(origin) %>%
summarise(delayed_dep_rate = sum(dep_type == "delayed") / n()) %>%
arrange(desc(delayed_dep_rate))
# Chunk 22
df <- nycflights %>%
mutate(avg_speed = distance / (air_time / 60)) # converting travel time to hours
head(df$avg_speed, 10)
# Chunk 23
ggplot(df, aes(x=distance, y=avg_speed)) + geom_point()
# Chunk 24
# Filtering our flights df to just the airlines we want
desired_airlines <- nycflights %>%
filter(carrier == "AA" | carrier == "DL" | carrier == "UA")
ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
# Chunk 25
sp <- ggplot(desired_airlines, aes(x=dep_delay, y=arr_delay, color=carrier)) + geom_point()
sp + geom_vline(xintercept = 60, linetype="dotted")
library('RMySQL')
library('dplyr')
pwd <- Sys.getenv("google_db_password") # Get db instance password
conn = dbConnect(MySQL(), user='root', password=pwd, dbname='movies', host='34.133.39.230')
conn
dbListTables(conn)
my_query <- dbSendQuery(conn, "select * from movie_ratings")
df <- fetch(my_query, n=-1)  # using n=-1 to retrieve all records
df
df <- df %>% replace(.=="Have not seen it", NA)
df$rating_timestamp <- as.POSIXct(df$rating_timestamp, format="%m/%d/%Y %H:%M:%S", tz="")
df
sfo_feb_flights
# Arrival delays into SFO
ggplot(sfo_feb_flights, aes(x=arr_delay)) + geom_histogram()
library('dplyr')
data_url <- "https://raw.githubusercontent.com/andrewbowen19/cunyDATA607/main/data/DailyDelhiClimateTrain.csv"
df <- read.csv(data_url, header=TRUE)
data_url <- "https://raw.githubusercontent.com/andrewbowen19/cunyDATA607/main/data/DailyDelhiClimateTrain.csv"
df <- read.csv(data_url, header=TRUE)
head(df, 10)
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
x = 20
yes
